/** Declaration file generated by dts-gen */
declare module "vue-api-query" {
  import { LooseObject } from "@/@types/base";
  import { Builder } from "@/@types/vue-api-query/Builder";
  import { AxiosInstance, AxiosRequestConfig, AxiosPromise } from "axios";

  type ThisClass<InstanceType extends Model> = {
    new (...args: any[]): InstanceType;
  };
  type Constructor<T> = new (...args: any[]) => T;

  interface Class<T> {
    super(...args: any[]): T;
  }

  export class Model {
    constructor(...args: any[]);
    super: Constructor<this>;

    static $http: AxiosInstance;
    $http: AxiosInstance;
    mutations?: object;
    _builder: Builder;

    /**
     * Settings
     */
    endpoint(): string;
    resource(): string;
    primaryKey(): string;
    getPrimaryKey(): string;
    baseURL(): string;
    request(config: AxiosRequestConfig): AxiosPromise<any>;
    _from(url: string): void;

    /**
     * Query
     */
    append(...args: any[]): this;
    custom(...args: any[]): this;
    include(...args: any[]): this;
    select(...args: any[]): this;
    orderBy(...args: any[]): this;
    where(field: string, value: any): this;
    whereIn(field: string, array: any[]): this;
    limit<T extends Model>(this: ThisClass<T>, value: number): T;
    page(value: number): this;
    params<T extends Model>(this: ThisClass<T>, payload: LooseObject): T;
    for(...args: any[]): this;
    hasMany<T>(model: T): T;

    // filterBy<T extends Model>(this: ThisClass<T>, filters: object): T;

    /**
     * Results
     */
    $find(identifier: number | string): any;
    $first(): any;
    $get(): any;
    find<T extends Model>(
      this: ThisClass<T>,
      identifier: number | string
    ): Promise<T>;
    first<T extends Model>(this: ThisClass<T>): Promise<T>;
    get<T extends Model>(this: ThisClass<T>): Promise<T[]>;
    delete(): Promise<any>;
    save<T extends Model>(this: ThisClass<T>): Promise<T>;
    attach(params: object): Promise<any>;
    sync(params: object): Promise<any>;

    /**
     * Helpers
     */
    hasId(): boolean;
    isValidId(id: any): boolean;

    parameterNames(): any;

    static $find(id: number | string): any;
    static $first(): any;
    static $get(): any;
    static append(...args: any[]): Model;
    static custom<T extends Model>(this: ThisClass<T>, ...args: any[]): T;
    static find<T extends Model>(this: ThisClass<T>, id: number | string): T;
    static first<T extends Model>(this: ThisClass<T>): T;
    static get(): any;
    static include(...args: any[]): Model;
    static instance<T extends Model>(this: ThisClass<T>): T;
    static limit<T extends Model>(this: ThisClass<T>, value: any): T;
    static orderBy(...args: any[]): Model;
    static page(value: any): Model;
    static params<T extends Model>(this: ThisClass<T>, payload: LooseObject): T;
    static select(...args: any[]): Model;
    static where(field: string, value: any): Model;
    static whereIn(field: string, array: any[]): Model;
  }
}
